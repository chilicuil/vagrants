# vi: set ft=ruby :
VAGRANTFILE_API_VERSION = '2'
Vagrant.require_version '>= 1.8.2'

CURRENT_DIR = File.expand_path(File.dirname(__FILE__))
DIRNAME     = File.basename(CURRENT_DIR)

hosts = [
    #10.10.10.1 is configured as bridged between the host and 10.10.1.x guests
    {
        :name  => "#{DIRNAME}.example.com",
        #modified base image with dependencies installed to decrease the
        #time required to bootstrap the environment, use
        #provision/repackage-vagrant-box.sh to rebuild the image
        #:box = "user/trusty64-react-native" #modified-base-image
        :box   => "ubuntu/trusty64",
        :ram   => "2048",
        :ip    => "10.10.10.11",
    },
]

host_os  = RbConfig::CONFIG['host_os']
if host_os =~ /linux/
    all_cpus = `nproc`.to_i
elsif host_os =~ /darwin/
    all_cpus = `sysctl -n hw.ncpu`.to_i
else #windows?
    all_cpus = `wmic cpu get NumberOfCores`.split("\n")[2].to_i
end

default_ram  = '512' #MB
default_cpu  = '50'  #%
default_cpus = all_cpus || '1'

#vagrant-hostmanager-ext automatically edit hosts files to let vms communicate by domain
raise "vagrant-hostmanager-ext plugin must be installed: $ vagrant plugin install vagrant-hostmanager-ext" unless Vagrant.has_plugin? "vagrant-hostmanager-ext"

#execute commands in host
module LocalCommand
    class Config < Vagrant.plugin("2", :config)
        attr_accessor :command
    end
    class Plugin < Vagrant.plugin("2")
        name "local_shell"
        config(:local_shell, :provisioner) do
            Config
        end
        provisioner(:local_shell) do
            Provisioner
        end
    end
    class Provisioner < Vagrant.plugin("2", :provisioner)
        def provision
            result = system "#{config.command}"
        end
    end
end

host_counter = 0; Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    hosts.each do |host|
        config.vm.define host[:name] do |machine|
            machine.vm.box      = host[:box]
            machine.vm.box_url  = host[:box_url] if host[:box_url]
            machine.vm.hostname = host[:name]

            #enable remote debugging
            machine.vm.network :private_network, ip: host[:ip]
            machine.vm.network "forwarded_port", guest: 22,   host: 2222, auto_correct: true, id:"ssh"
            machine.vm.network "forwarded_port", guest: 8081, host: 8081, auto_correct: true, id:"chrome powered debugging"
            machine.vm.network "forwarded_port", guest: 5037, host: 5037, auto_correct: true, id:"adb"
            machine.vm.network "forwarded_port", guest: 8080, host: 8080, auto_correct: true, id:"gotty"

            #use rsync instead of vboxfs to keep files on the guest continually
            #updated, required for live reload to work correctly
            #https://www.virtualbox.org/ticket/10660?cversion=0&cnum_hist=1
            machine.vm.synced_folder ".", "/home/vagrant/#{DIRNAME}", type: "rsync",
                rsync__args: ["--verbose", "--archive", "-z", "--copy-links"]

            #enable X11 forwarding for chrome powered debugging
            machine.ssh.forward_agent = true
            machine.ssh.forward_x11   = true

            machine.vm.provider "virtualbox" do |vbox|
                vbox.name = host[:name]
                vbox.linked_clone = true
                vbox.customize ["modifyvm", :id, "--memory", host[:ram] || default_ram ]          #MB
                vbox.customize ["modifyvm", :id, "--cpuexecutioncap", host[:cpu] || default_cpu ] #%
                vbox.customize ["modifyvm", :id, "--cpus", host[:cpus] || default_cpus ]

                #enable USB
                vbox.customize ["modifyvm", :id, "--usb", "on"]
                #vbox.customize ["modifyvm", :id, "--usbehci", "on"]
                vbox.customize ['usbfilter', 'add', '0', '--target', :id, '--name', '1197123b', '--vendorid', '0x04e8']
                vbox.customize ['usbfilter', 'add', '0', '--target', :id, '--name', 'android',  '--vendorid', '0x18d1']
            end

            #echo cmds, lambda syntax: http://stackoverflow.com/questions/8476627/what-do-you-call-the-operator-in-ruby
            #why not UPPERCASE?: https://ruby-doc.org/docs/ruby-doc-bundle/UsersGuide/rg/constants.html
            cmd_script_root        = -> (cmd) { machine.vm.provision 'shell', path:   cmd, name: cmd, privileged: true  }
            cmd_script             = -> (cmd) { machine.vm.provision 'shell', path:   cmd, name: cmd, privileged: false }
            cmd_inline_root        = -> (cmd) { machine.vm.provision 'shell', inline: cmd, name: cmd, privileged: true  }
            cmd_inline             = -> (cmd) { machine.vm.provision 'shell', inline: cmd, name: cmd, privileged: false }
            cmd_script_always_root = -> (cmd) { machine.vm.provision 'shell', path:   cmd, name: cmd, run: "always", privileged: false }
            cmd_script_always      = -> (cmd) { machine.vm.provision 'shell', path:   cmd, name: cmd, run: "always", privileged: false }

            #authorize default public ssh key
            cmd_inline_root.call("mkdir -p /root/.ssh/")
            cmd_inline.call     ("mkdir -p /home/vagrant/.ssh/")
            if File.file?("#{Dir.home}/.ssh/id_rsa.pub")
                ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
                cmd_inline_root.call("printf '\\n%s\\n' '#{ssh_pub_key}' >> /root/.ssh/authorized_keys")
                cmd_inline.call     ("printf '\\n%s\\n' '#{ssh_pub_key}' >> /home/vagrant/.ssh/authorized_keys")
            end

            #copy private ssh key
            if File.file?("#{Dir.home}/.ssh/id_rsa")
                machine.vm.provision "file",  source: "~/.ssh/id_rsa", destination: "/home/vagrant/.ssh/id_rsa"
                cmd_inline.call("chown vagrant:vagrant /home/vagrant/.ssh/id_rsa")
                cmd_inline.call("chmod 600 /home/vagrant/.ssh/id_rsa")
            else
                if File.file?("ansible-local/ansible-local.pub")
                    ssh_pub_key = File.readlines("ansible-local/ansible-local.pub").first.strip
                    cmd_inline_root.call("printf '\\n%s\\n' '#{ssh_pub_key}' >> /root/.ssh/authorized_keys")
                    cmd_inline.call     ("printf '\\n%s\\n' '#{ssh_pub_key}' >> /home/vagrant/.ssh/authorized_keys")
                    machine.vm.provision "file",  source: "ansible-local/ansible-local.priv", destination: "/home/vagrant/.ssh/id_rsa"
                    cmd_inline.call     ("chown vagrant:vagrant /home/vagrant/.ssh/id_rsa")
                    cmd_inline.call     ("chmod 600 /home/vagrant/.ssh/id_rsa")
                end
            end

            #copy gitconfig
            if File.file?("#{Dir.home}/.gitconfig")
                machine.vm.provision "file",  source: "~/.gitconfig", destination: "/home/vagrant/.gitconfig"
            end

            #provision
            Dir.glob("#{CURRENT_DIR}/provision/0*.sh").sort.each { |provision_script|
                cmd_script.call(provision_script)
            }

            #optional
            Dir.glob("#{CURRENT_DIR}/provision/extra-*.sh").sort.each { |provision_script|
                cmd_script.call(provision_script)
            }

            #recurrent jobs
            Dir.glob("#{CURRENT_DIR}/provision/always-*.sh").sort.each { |provision_script|
                cmd_script_always.call(provision_script)
            }

            if Vagrant::Util::Platform.windows? then
                machine.vm.provision "shell", inline: 'printf "%s\\n" "Now run $ vagrant rsync-auto #to enable live reload"'
            else #unix
                machine.vm.provision "shell", inline: 'printf "%s\\n" "Launching $ vagrant rsync-auto > vagrant-rsync-auto.log"'
                machine.vm.provision 'local_shell', command: "nohup vagrant rsync-auto > #{CURRENT_DIR}/vagrant-rsync-auto.log 2>&1 &"
            end
        end
    end
    config.hostmanager.enabled      = true
    config.hostmanager.manage_host  = true
    config.hostmanager.manage_guest = true
end
