# vi: set ft=ruby :
VAGRANTFILE_API_VERSION = '2'
Vagrant.require_version '>= 1.8.2'

CURRENT_DIR = File.expand_path(File.dirname(__FILE__))
DIRNAME     = File.basename(CURRENT_DIR)

hosts = [
    #10.10.10.1 is configured as bridged between the host and 10.10.1.x guests
    {
        :name  => "#{DIRNAME}.example.com",
        :box   => "ubuntu/trusty64",
        :ram   => "512", :cpus  => "1",
        :ip    => "10.10.10.11",
    },
]

host_os  = RbConfig::CONFIG['host_os']
if host_os =~ /linux/
    all_cpus = `nproc`.to_i
elsif host_os =~ /darwin/
    all_cpus = `sysctl -n hw.ncpu`.to_i
else #windows?
    all_cpus = `wmic cpu get NumberOfCores`.split("\n")[2].to_i
end

default_ram  = '512' #MB
default_cpu  = '50'  #%
default_cpus = all_cpus || '1'

#vagrant-hostmanager-ext automatically edit hosts files to let vms communicate by domain
raise "vagrant-hostmanager-ext plugin must be installed: $ vagrant plugin install vagrant-hostmanager-ext" unless Vagrant.has_plugin? "vagrant-hostmanager-ext"

$admin_preconditions = <<SCRIPT
apt-get update
DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y tmux htop vim-nox git-core mercurial subversion wget curl python-software-properties python-pip build-essential g++ default-jdk ruby nodejs golang php5-cli sqlite3
[ -f /tmp/gotty_linux_amd64.tar.gz ] || wget --progress=bar:force https://github.com/yudai/gotty/releases/download/v0.0.13/gotty_linux_amd64.tar.gz -O /tmp/gotty_linux_amd64.tar.gz
[ -f /usr/bin/gotty ] || tar zxf /tmp/gotty_linux_amd64.tar.gz -C /usr/bin/
SCRIPT

$user_preconditions = <<SCRIPT
mkdir -p ~/q1.dir/{or/ga/ni/za/tion,li/nu/x}
touch ~/q1.dir/{{1,2,3,4,5}.pyc,or/{1,2,3}.pyc,or/ga/{1,2,3,4,5,6,7,8,9}.pyc,or/ga/ni/{1,2,3,4,5,6,7,8,9,0}.pyc,or/ga/ni/za/tion/{1,2,3,4,5,6,7}.pyc,li/{1,2,3}.pyc,li/nu/x/{1,2,3,4,5}.pyc}
> ~/q3.in
for i in $(seq 100); do echo "there is $i linux system(s) running ..., wops, error, there is 0 linux system(s) running ...)" >> ~/q3.in; done
wget --progress=bar:force http://veekun.com/static/pokedex/downloads/veekun-pokedex.sqlite.gz
gunzip veekun-pokedex.sqlite.gz && mv veekun-pokedex.sqlite q8.in
SCRIPT

host_counter = 0; Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    hosts.each do |host|
        config.vm.define host[:name] do |machine|
            machine.vm.box      = host[:box]
            machine.vm.box_url  = host[:box_url] if host[:box_url]
            machine.vm.hostname = host[:name]

            machine.vm.network :private_network, ip: host[:ip]
            #machine.vm.network "forwarded_port", guest: 80, host: 8080, auto_correct: true, id:"httpd"

            machine.vm.provider "virtualbox" do |vbox|
                vbox.name = host[:name]
                vbox.linked_clone = true
                vbox.customize ["modifyvm", :id, "--memory", host[:ram] || default_ram ]          #MB
                vbox.customize ["modifyvm", :id, "--cpuexecutioncap", host[:cpu] || default_cpu ] #%
                vbox.customize ["modifyvm", :id, "--cpus", host[:cpus] || default_cpus ]
            end

            #echo cmds, lambda syntax: http://stackoverflow.com/questions/8476627/what-do-you-call-the-operator-in-ruby
            #why not UPPERCASE?: https://ruby-doc.org/docs/ruby-doc-bundle/UsersGuide/rg/constants.html
            cmd_script_root        = -> (cmd) { machine.vm.provision 'shell', path:   cmd, name: cmd, privileged: true  }
            cmd_script             = -> (cmd) { machine.vm.provision 'shell', path:   cmd, name: cmd, privileged: false }
            cmd_inline_root        = -> (cmd) { machine.vm.provision 'shell', inline: cmd, name: cmd, privileged: true  }
            cmd_inline             = -> (cmd) { machine.vm.provision 'shell', inline: cmd, name: cmd, privileged: false }
            cmd_script_always_root = -> (cmd) { machine.vm.provision 'shell', path:   cmd, name: cmd, run: "always", privileged: false }
            cmd_script_always      = -> (cmd) { machine.vm.provision 'shell', path:   cmd, name: cmd, run: "always", privileged: false }

            #authorize default public ssh key
            cmd_inline_root.call("mkdir -p /root/.ssh/")
            cmd_inline.call     ("mkdir -p /home/vagrant/.ssh/")
            if File.file?("#{Dir.home}/.ssh/id_rsa.pub")
                ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
                cmd_inline_root.call("printf '\\n%s\\n' '#{ssh_pub_key}' >> /root/.ssh/authorized_keys")
                cmd_inline.call     ("printf '\\n%s\\n' '#{ssh_pub_key}' >> /home/vagrant/.ssh/authorized_keys")
            end

            #copy private ssh key
            if File.file?("#{Dir.home}/.ssh/id_rsa")
                machine.vm.provision "file",  source: "~/.ssh/id_rsa", destination: "/home/vagrant/.ssh/id_rsa"
                cmd_inline.call("chown vagrant:vagrant /home/vagrant/.ssh/id_rsa")
                cmd_inline.call("chmod 600 /home/vagrant/.ssh/id_rsa")
            else
                if File.file?("ansible-local/ansible-local.pub")
                    ssh_pub_key = File.readlines("ansible-local/ansible-local.pub").first.strip
                    cmd_inline_root.call("printf '\\n%s\\n' '#{ssh_pub_key}' >> /root/.ssh/authorized_keys")
                    cmd_inline.call     ("printf '\\n%s\\n' '#{ssh_pub_key}' >> /home/vagrant/.ssh/authorized_keys")
                    machine.vm.provision "file",  source: "ansible-local/ansible-local.priv", destination: "/home/vagrant/.ssh/id_rsa"
                    cmd_inline.call     ("chown vagrant:vagrant /home/vagrant/.ssh/id_rsa")
                    cmd_inline.call     ("chmod 600 /home/vagrant/.ssh/id_rsa")
                end
            end

            #copy gitconfig
            if File.file?("#{Dir.home}/.gitconfig")
                machine.vm.provision "file",  source: "~/.gitconfig", destination: "/home/vagrant/.gitconfig"
            end

            #entrevista preconditions
            cmd_inline.call("cp /vagrant/linux-interview* ~")
            cmd_inline.call("cp /vagrant/{README.txt,q2.in}  ~")
            cmd_inline.call("chmod +x ~/linux-interview.test")

            machine.vm.provision "shell", inline: $admin_preconditions
            machine.vm.provision "shell", inline: $user_preconditions, privileged: false
        end
    end
    config.hostmanager.enabled      = true
    config.hostmanager.manage_host  = true
    config.hostmanager.manage_guest = true
end
