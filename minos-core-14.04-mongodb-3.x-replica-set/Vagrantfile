# vi: set ft=ruby :
VAGRANTFILE_API_VERSION = '2'
Vagrant.require_version '>= 1.8.2'

CURRENT_DIR = File.expand_path(File.dirname(__FILE__))
DIRNAME     = File.basename(CURRENT_DIR)

hosts = [
    #10.10.10.1 is configured as bridged between the host and 10.10.1.x guests
    {
        :name  => "mongodb-01.example.com",
        :box   => "minos/core-14.04",
        :group => "mongodb-primary",
        :ram   => "512", :cpus  => "1",
        :ip    => "10.10.10.11",
    },
    {
        :name  => "mongodb-02.example.com",
        :box   => "minos/core-14.04",
        :group => "mongodb-secundary",
        :ram   => "512", :cpus  => "1",
        :ip    => "10.10.10.12",
    },
    {
        :name  => "mongodb-03.example.com",
        :box   => "minos/core-14.04",
        :group => "mongodb-arbiter",
        :ram   => "512", :cpus  => "1",
        :ip    => "10.10.10.13",
    },
]

host_os  = RbConfig::CONFIG['host_os']
if host_os =~ /linux/
    all_cpus = `nproc`.to_i
elsif host_os =~ /darwin/
    all_cpus = `sysctl -n hw.ncpu`.to_i
else #windows?
    all_cpus = `wmic cpu get NumberOfCores`.split("\n")[2].to_i
end

default_ram  = '512' #MB
default_cpu  = '50'  #%
default_cpus = all_cpus || '1'

#vagrant-hostmanager automatically edit hosts files to let vms/host communicate by domain
raise "vagrant-hostmanager plugin must be installed: $ vagrant plugin install vagrant-hostmanager" unless Vagrant.has_plugin? "vagrant-hostmanager"

#cross-platform way of finding an executable in the $PATH.
def which(cmd)
    exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
    ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
        exts.each do |ext|
            exe = File.join(path, "#{cmd}#{ext}")
            return exe if File.executable?(exe) && !File.directory?(exe)
        end
    end
    nil
end

host_counter = 0; Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    hosts.each do |host|
        config.vm.define host[:name] do |machine|
            machine.vm.box      = host[:box]
            machine.vm.box_url  = host[:box_url] if host[:box_url].nil?
            machine.vm.hostname = host[:name]

            machine.vm.network :private_network, ip: host[:ip]

            machine.vm.provider "virtualbox" do |vbox|
                vbox.name = host[:name]
                vbox.linked_clone = true
                vbox.customize ["modifyvm", :id, "--memory", host[:ram] || default_ram ]          #MB
                vbox.customize ["modifyvm", :id, "--cpuexecutioncap", host[:cpu] || default_cpu ] #%
                vbox.customize ["modifyvm", :id, "--cpus", host[:cpus] || default_cpus ]
            end

            #echo cmds, lambda syntax: http://stackoverflow.com/questions/8476627/what-do-you-call-the-operator-in-ruby
            #why not UPPERCASE?: https://ruby-doc.org/docs/ruby-doc-bundle/UsersGuide/rg/constants.html
            cmd_script_root        = -> (cmd) { machine.vm.provision 'shell', path:   cmd, name: cmd, privileged: true  }
            cmd_script             = -> (cmd) { machine.vm.provision 'shell', path:   cmd, name: cmd, privileged: false }
            cmd_inline_root        = -> (cmd) { machine.vm.provision 'shell', inline: cmd, name: cmd, privileged: true  }
            cmd_inline             = -> (cmd) { machine.vm.provision 'shell', inline: cmd, name: cmd, privileged: false }
            cmd_script_always_root = -> (cmd) { machine.vm.provision 'shell', path:   cmd, name: cmd, run: "always", privileged: false }
            cmd_script_always      = -> (cmd) { machine.vm.provision 'shell', path:   cmd, name: cmd, run: "always", privileged: false }

            #authorize default public ssh key
            cmd_inline_root.call("mkdir -p /root/.ssh/")
            cmd_inline.call     ("mkdir -p /home/vagrant/.ssh/")
            if File.file?("#{Dir.home}/.ssh/id_rsa.pub")
                ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
                cmd_inline_root.call("printf '\\n%s\\n' '#{ssh_pub_key}' >> /root/.ssh/authorized_keys")
                cmd_inline.call     ("printf '\\n%s\\n' '#{ssh_pub_key}' >> /home/vagrant/.ssh/authorized_keys")
            end

            #copy private ssh key
            if File.file?("#{Dir.home}/.ssh/id_rsa")
                machine.vm.provision "file",  source: "~/.ssh/id_rsa", destination: "/home/vagrant/.ssh/id_rsa"
                cmd_inline.call("chown vagrant:vagrant /home/vagrant/.ssh/id_rsa")
                cmd_inline.call("chmod 600 /home/vagrant/.ssh/id_rsa")
            else
                if File.file?("provision/ansible-local/ansible-local.pub")
                    ssh_pub_key = File.readlines("ansible-local/ansible-local.pub").first.strip
                    cmd_inline_root.call("printf '\\n%s\\n' '#{ssh_pub_key}' >> /root/.ssh/authorized_keys")
                    cmd_inline.call     ("printf '\\n%s\\n' '#{ssh_pub_key}' >> /home/vagrant/.ssh/authorized_keys")
                    machine.vm.provision "file",
                        source:      "provision/ansible-local/ansible-local.priv",
                        destination: "/home/vagrant/.ssh/id_rsa"
                    cmd_inline.call     ("chown vagrant:vagrant /home/vagrant/.ssh/id_rsa")
                    cmd_inline.call     ("chmod 600 /home/vagrant/.ssh/id_rsa")
                end
            end

            #copy gitconfig
            if File.file?("#{Dir.home}/.gitconfig")
                machine.vm.provision "file",  source: "~/.gitconfig", destination: "/home/vagrant/.gitconfig"
            end

            #only execute ansible when all hosts are ready
            host_counter = host_counter + 1; if File.file?("provision/ansible.yml")
                if host_counter == hosts.length

                    #create ansible inventory groups to apply group_vars
                    ansible_groups = {}; for h in hosts do
                      if ansible_groups.has_key?(h[:group])
                        #append to list
                        ansible_groups[h[:group]].push(h[:name])
                      else
                        ansible_groups[h[:group]] = [h[:name]]
                      end
                    end

                    if which('ansible-playbook')
                        machine.vm.provision "ansible" do |ansible|
                            ansible.playbook    = "provision/ansible.yml"
                            ansible.config_file = "provision/ansible.cfg"
                            ansible.extra_vars  = "provision/inventories/vagrant/group_vars/all/vars.yml"
                            ansible.limit       = "all"
                            ansible.groups      = ansible_groups
                            #ansible.verbose    = "vvv"
                            #ansible.galaxy_role_file = "requirements.yml"
                        end
                    else
                        machine.vm.provision "ansible_local" do |ansible|
                            ansible.playbook    = "provision/ansible.yml"
                            ansible.config_file = "provision/ansible.cfg"
                            ansible.extra_vars  = "provision/inventories/vagrant/group_vars/all/vars.yml"
                            ansible.limit       = "all"
                            ansible.groups      = ansible_groups
                            #ansible.verbose        = "vvv"
                            #ansible.raw_arguments  = [
                                 #"--connection=paramiko",
                                #"--private-key=/vagrant/.vagrant/machines/.../private_key"
                            #]
                            #ansible.galaxy_role_file = "requirements.yml"
                        end
                    end
                end
            end
        end
    end
    config.hostmanager.enabled      = true
    config.hostmanager.manage_host  = true
    config.hostmanager.manage_guest = true
end
